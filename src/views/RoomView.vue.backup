<template>
  <div class="min-h-screen p-4 overflow-hidden">
    <div class="max-w-7xl mx-auto                             cla              class="w-full glass-light hover:bg-white/15 text-white text-xs py-1.5 px-3 rounded-lg transition-all">s="w-full glass-light hover:bg-white/15 text-white text-xs py-1.5 px-3 rounded-lg transition-all">         class="w-full glass-strong hover:bg-white/30 text-white text-xs py-1.5 px-3 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed">        class="w-full glass-strong hover:bg-white/30 text-white text-xs py-1.5 px-3 rounded-lg transition-all">h-[calc(100vh-2rem)]">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 h-full">
        <!-- Game Board & Cards Section -->
        <div class="lg:col-span-2 flex flex-col gap-4 min-h-0">
          <!-- Board -->
          <div class="glass-card p-4 flex-shrink-0">
            <div class="flex justify-between items-center mb-3">
              <h2 class="text-lg font-semibold text-white">Javanese Chess</h2>
              <button
                @click="toggleCoordinates"
                class="glass-light text-white text-xs px-2 py-1 rounded"
              >
                {{ showCoordinates ? 'Hide' : 'Show' }} Coords
              </button>
            </div>

            <BoardComponent
              :board="gameStore.board"
              :show-coordinates="showCoordinates"
              :selected-card="selectedCard"
              @cell-click="handleCellClick"
              @card-drop="handleCardDrop"
            />
          </div>

          <!-- Player's Cards -->
          <CardHandComponent
            v-if="currentPlayerCards.length > 0"
            :cards="currentPlayerCards"
            :disabled="!isPlayerTurn"
            :selected-card="selectedCard"
            @card-click="handleCardClick"
            @card-drag-start="handleCardDragStart"
            @card-drag-end="handleCardDragEnd"
          />
        </div>

        <!-- Side Panel - Scrollable -->
        <div class="space-y-3 overflow-y-auto max-h-[calc(100vh-2rem)]">
          <!-- Current Turn -->
          <div class="glass-card p-3">
            <h3 class="text-base font-semibold text-white mb-2">Current Turn</h3>
            <div
              v-if="gameStore.currentPlayer"
              class="flex items-center gap-3 glass-light rounded-lg p-3"
            >
              <div
                class="w-4 h-4 rounded-full"
                :class="`bg-player-${gameStore.currentPlayer.color}`"
              ></div>
              <span class="text-white font-medium">
                {{ gameStore.currentPlayer.name }}
              </span>
            </div>
            <div v-else class="text-white/60 text-sm text-center py-3">No player turn yet</div>
          </div>

          <!-- Players -->
          <div class="glass-card p-3">
            <h3 class="text-base font-semibold text-white mb-2">Players</h3>
            <div v-if="gameStore.players.length > 0" class="space-y-1.5">
              <div
                v-for="player in gameStore.players"
                :key="player.id"
                class="glass-light rounded-lg p-3"
              >
                class="glass-light rounded-lg p-2">
                <div class="flex items-center gap-2 mb-1">
                  <div class="w-3 h-3 rounded-full" :class="`bg-player-${player.color}`"></div>
                  <span class="text-white text-sm font-medium">
                    {{ player.name }}
                  </span>
                  <span v-if="player.isBot" class="text-xs glass px-2 py-0.5 rounded text-white/60">
                    BOT
                  </span>
                </div>
                <div class="text-white/60 text-xs">
                  Cards: {{ player.cardsInHand.length }} in hand, {{ player.cardsInDeck.length }} in
                  deck
                </div>
              </div>
            </div>
            <div v-else class="text-white/60 text-sm text-center py-3">No players yet</div>
          </div>

          <!-- Demo Actions -->
          <div class="glass-card p-3">
            <h3 class="text-base font-semibold text-white mb-2">Demo Actions</h3>
            <div class="space-y-1.5">
              <button
                @click="initDemoGame"
                class="w-full glass-strong hover:bg-white/30 text-white text-sm py-2 px-4 rounded-lg transition-all"
              >
                Initialize Demo Game
              </button>
              <button
                @click="placeRandomCard"
                :disabled="gameStore.players.length === 0"
                class="w-full glass-strong hover:bg-white/30 text-white text-sm py-2 px-4 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Place Random Card
              </button>
              <button
                @click="resetBoard"
                class="w-full glass-light hover:bg-white/15 text-white text-sm py-2 px-4 rounded-lg transition-all"
              >
                Reset Board
              </button>
            </div>
          </div>

          <!-- Room Info -->
          <div class="glass-card p-3">
            <div class="mb-2">
              <p class="text-white/80 text-sm">
                Room ID: <span class="font-mono text-white">{{ code }}</span>
              </p>
              <span class="text-xs glass px-2 py-0.5 rounded text-white/60 inline-block mt-2">
                Demo Mode
              </span>
            </div>
            <button
              @click="leaveRoom"
              class="w-full glass-light hover:bg-white/15 text-white text-sm py-2 px-4 rounded-lg transition-all"
            >
              Leave Room
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { useGameStore } from '@/stores/game'
import BoardComponent from '@/components/BoardComponent.vue'
import CardHandComponent from '@/components/CardHandComponent.vue'
import { PlayerColor, type Card, type Player, type Position } from '@/types/game'

const router = useRouter()
const route = useRoute()
const gameStore = useGameStore()

const code = ref(route.params.code as string)
const showCoordinates = ref(true)
const selectedCard = ref<Card | null>(null)
const draggedCard = ref<Card | null>(null)

// Get current human player's cards
const currentPlayerCards = computed(() => {
  const humanPlayer = gameStore.players.find((p) => !p.isBot)
  return humanPlayer?.cardsInHand || []
})

// Check if it's player's turn
const isPlayerTurn = computed(() => {
  return gameStore.currentPlayer && !gameStore.currentPlayer.isBot
})

onMounted(() => {
  if (!code.value) {
    router.push('/')
  }
})

function toggleCoordinates() {
  showCoordinates.value = !showCoordinates.value
}

function handleCellClick(position: { x: number; y: number }) {
  console.log('Cell clicked:', position)
  
  // If a card is selected, try to place it
  if (selectedCard.value) {
    handleCardDrop(selectedCard.value, position)
    selectedCard.value = null // Deselect after placing
  }
}

function handleCardClick(card: Card) {
  // Toggle card selection
  if (selectedCard.value?.id === card.id) {
    selectedCard.value = null // Deselect if clicking same card
  } else {
    selectedCard.value = card // Select new card
  }
}

function handleCardDragStart(card: Card) {
  draggedCard.value = card
  console.log('Drag start:', card)
}

function handleCardDragEnd() {
  draggedCard.value = null
}

function handleCardDrop(card: Card, position: Position) {
  console.log('Card dropped:', card, 'at', position)

  // Validate it's player's turn
  if (!isPlayerTurn.value) {
    alert("It's not your turn!")
    return
  }

  // Check if move is valid
  if (!gameStore.isValidMove(position, card)) {
    alert(
      'Invalid move! You can only place cards adjacent to existing cards, or at center for first move.',
    )
    return
  }

  // Check if cell is empty
  const cell = gameStore.board[position.y]?.[position.x]
  if (cell?.card) {
    alert('This cell already has a card!')
    return
  }

  // Place the card
  gameStore.placeCard(card, position)

  // Remove card from player's hand
  const humanPlayer = gameStore.players.find((p) => !p.isBot)
  if (humanPlayer) {
    humanPlayer.cardsInHand = humanPlayer.cardsInHand.filter((c) => c.id !== card.id)

    // Draw a new card from deck if available
    if (humanPlayer.cardsInDeck.length > 0) {
      const newCard = humanPlayer.cardsInDeck.shift()
      if (newCard) {
        humanPlayer.cardsInHand.push(newCard)
      }
    }
  }

  // Next turn
  gameStore.nextTurn()
}

function initDemoGame() {
  // Helper function to create cards for a player
  const createCardsForPlayer = (playerId: string, color: PlayerColor) => {
    const allCards: Card[] = []
    // Each player has 2 cards of each value (1-9) = 18 cards total
    for (let value = 1; value <= 9; value++) {
      for (let count = 0; count < 2; count++) {
        allCards.push({
          id: `${playerId}-card-${value}-${count}`,
          value: value as 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9,
          color: color,
          playerId: playerId,
        })
      }
    }
    // Shuffle cards
    for (let i = allCards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      const temp = allCards[i]
      const swap = allCards[j]
      if (temp && swap) {
        allCards[i] = swap
        allCards[j] = temp
      }
    }
    return allCards
  }

  // Create 4 players: 1 human + 3 bots with different colors
  const players: Player[] = [
    {
      id: 'player-1',
      name: 'You',
      color: PlayerColor.GREEN,
      isBot: false,
      cardsInHand: [],
      cardsInDeck: [],
      totalCards: 18,
      score: 0,
    },
    {
      id: 'bot-1',
      name: 'Bot Red',
      color: PlayerColor.RED,
      isBot: true,
      cardsInHand: [],
      cardsInDeck: [],
      totalCards: 18,
      score: 0,
    },
    {
      id: 'bot-2',
      name: 'Bot Blue',
      color: PlayerColor.BLUE,
      isBot: true,
      cardsInHand: [],
      cardsInDeck: [],
      totalCards: 18,
      score: 0,
    },
    {
      id: 'bot-3',
      name: 'Bot Purple',
      color: PlayerColor.PURPLE,
      isBot: true,
      cardsInHand: [],
      cardsInDeck: [],
      totalCards: 18,
      score: 0,
    },
  ]

  // Distribute cards to each player
  players.forEach((player) => {
    const allCards = createCardsForPlayer(player.id, player.color)
    player.cardsInHand = allCards.slice(0, 5) // First 5 cards in hand
    player.cardsInDeck = allCards.slice(5) // Remaining 13 cards in deck
  })

  gameStore.initGame(code.value, players)
}

function placeRandomCard() {
  if (gameStore.players.length === 0) {
    alert('Please initialize demo game first')
    return
  }

  // Get random empty position
  const emptyPositions: { x: number; y: number }[] = []
  for (let y = 0; y < 9; y++) {
    for (let x = 0; x < 9; x++) {
      const cell = gameStore.board[y]?.[x]
      if (cell && !cell.card) {
        emptyPositions.push({ x, y })
      }
    }
  }

  if (emptyPositions.length === 0) {
    alert('Board is full!')
    return
  }

  // If first move, place at center
  let position: { x: number; y: number }
  if (gameStore.firstMove) {
    position = { x: 4, y: 4 }
  } else {
    const randomPos = emptyPositions[Math.floor(Math.random() * emptyPositions.length)]
    if (!randomPos) return
    position = randomPos
  }

  // Create random card
  const currentPlayer = gameStore.currentPlayer
  if (!currentPlayer) return

  const card: Card = {
    id: `card-${Date.now()}`,
    value: (Math.floor(Math.random() * 9) + 1) as 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9,
    color: currentPlayer.color,
    playerId: currentPlayer.id,
  }

  // Place card
  gameStore.placeCard(card, position)
  gameStore.nextTurn()
}

function resetBoard() {
  gameStore.resetGame()
}

function leaveRoom() {
  gameStore.resetGame()
  router.push('/')
}
</script>
